Categoría: considerando que ya tenemos la categoría hecha como un enum, podemos aprovecharlo para persistirlo con @Enumerated y ahorrarnos ese problema.
Dispositivo: Joined porque queremos poder tratarlo polimórficamente, pero tienen pocos atributos en común como para usar una Single. El estado en el inteligente podemos persistirlo como varchar porque cada estado no tiene atributos propios, y los atributos de la clase Estado lo podemos desnormalizar a la tabla del Dispositivo para no agregar otra tabla intermedia.
DDS.SGE.Fabricante: no estoy muy seguro con esta, puse una TablePerClass pero no estoy del todo seguro. No creo que se vaya a consultar el DDS.SGE.Fabricante en específico, sino que cuando se levante el Dispositivo y se necesite al DDS.SGE.Fabricante ahí se va a consultar. Se podría usar una Joined, pero una Single no creo porque tienen muchos atributos diferentes.
Repositorio: @OneToMany para la lisat de intervalos.

Actuador: Single porque todos los actuadores tienen un dispositivo, y los atributos intensidadASubir e intensidadABajar son propios de dos actuadores diferentes, pero al ser pocos atributos no en común, aprovechamos la simpleza de la Single.
Sensor: de vuelta, no estoy muy seguro con esta. En principio usaría una Joined porque al crear una regla, persistirla y levantarla vamos a tener una lista de sensores diferentes, así que probablemente resulte más eficiente una Joined que TablePerClass. Single no porque de nuevo, tienen pocos atributos en común.
Regla: @OneToMany en la lista de Sensores.

Zona: @OneToMany para los transformadores.
Transformador: @OneToMany para los clientes.
